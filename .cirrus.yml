env:
  REPO: you54f/traveling-ruby
  PKG_DATE: 20240215
  NEXT_TAG: rel-$PKG_DATE
  GITHUB_TOKEN: ENCRYPTED[7f3663f35400d0e1f8e0fec456af6b75a07b0fd2d0632fe1697b8fb73af5e78245144216288d88d2daa681ccd159e07d]

INSTALL_GH_CLI: &INSTALL_GH_CLI
  install_gh_cli_script: |
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && apt update \
    && apt install gh -y

PRE_RELEASE_TASK: &PRE_RELEASE_TASK
  prerelease_script: |
    RELEASE_NOTES=$(git log --pretty=format:"%s" $(git describe --tags --abbrev=0)..HEAD)
    gh release create "${NEXT_TAG}" --prerelease --draft --repo "${REPO}" --title "${NEXT_TAG}" --notes "${RELEASE_NOTES}"


UPLOAD_TASK: &UPLOAD_TASK
  upload_script: |
    cd $PLATFORM
    for file in $(find traveling-ruby-gems-* -name '*.gz'); do
      gem_name=$(echo "${file%-*}" | tr '/' '-')
      gem_version=$(echo "${file%.tar.gz}" | awk -F- '{print $NF}')
      pkg_date=$(echo "${file%-*}" | cut -d'-' -f4)
      ruby_version=$(echo "${file%-*}" | tr '/' '-' | sed -E 's/.*-([0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9]+)?)-([a-z]+)-([a-z0-9_]+)\.tar\.gz/\1/')
      echo $ruby_version-$gem_version.tar.gz
      cp "$file" $ruby_version-$gem_version.tar.gz
    done
    ls -l
    if [[ $CIRRUS_BRANCH == 'main' ]]; then
      gh release upload "${NEXT_TAG}" traveling-ruby-*.tar.gz --repo "${REPO}" --clobber
    else
      echo "Not on main branch, skipping upload"
    fi

DOWNLOAD_TASK: &DOWNLOAD_TASK
  download_script: |
    gh release download  "${NEXT_TAG}" --repo "${REPO}" -p *$PLATFORM-$CIRRUS_ARCH*

# ========================================
# Release Tasks
# ========================================


## General tasks for GitHub Releases
## These tasks are used to create a release, upload the binaries
## and download the binaries for testing

## The available tasks are:
## prerelease_task: Creates a prerelease
## release_task: Creates a release
## upload_task: Uploads the binaries to the release
## download_task: Downloads the binaries from the release

prerelease_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(prerelease\).*'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    GH_TOKEN: $GITHUB_TOKEN
  <<: *PRE_RELEASE_TASK

upload_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(upload\).*'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    GH_TOKEN: $GITHUB_TOKEN
  <<: *UPLOAD_TASK

# release_task: 
#   macos_instance:
#     image: ghcr.io/cirruslabs/macos-ventura-base:latest
#   env:
#     GH_TOKEN: $GITHUB_TOKEN
#   <<: *RELEASE_TASK

download_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(download\).*'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    GH_TOKEN: $GITHUB_TOKEN
  <<: *DOWNLOAD_TASK
  script: ls

RUBY_VERSIONS_LATEST_MATRIX: &RUBY_VERSIONS_LATEST_MATRIX
  RUBY_VERSIONS: 3.3.0
  RUBY_VERSIONS: 3.2.3
  RUBY_VERSIONS: 3.1.4
  RUBY_VERSIONS: 3.0.6
  RUBY_VERSIONS: 2.7.8
  RUBY_VERSIONS: 2.6.10

RUBY_VERSIONS_MATRIX_MACOS: &RUBY_VERSIONS_MATRIX_MACOS
  RUBY_VERSIONS: 3.3.0
  RUBY_VERSIONS: 3.2.3
  RUBY_VERSIONS: 3.1.4
  RUBY_VERSIONS: 3.0.6

RUBY_VERSIONS_MATRIX_LINUX: &RUBY_VERSIONS_MATRIX_LINUX
  RUBY_VERSIONS: 3.3.0
  RUBY_VERSIONS: 3.2.3
  RUBY_VERSIONS: 3.1.4
  RUBY_VERSIONS: 3.0.4
  RUBY_VERSIONS: 2.6.10
  # RUBY_VERSIONS: 3.0.6
  # RUBY_VERSIONS: 2.7.8

RUBY_VERSIONS_MATRIX_LINUX_ALPINE: &RUBY_VERSIONS_MATRIX_LINUX_ALPINE
  RUBY_VERSIONS: 3.3.0
  RUBY_VERSIONS: 3.2.3
  RUBY_VERSIONS: 3.1.4
  # RUBY_VERSIONS: 3.0.4
  # RUBY_VERSIONS: 2.6.10
  # # RUBY_VERSIONS: 3.0.6
  # # RUBY_VERSIONS: 2.7.8

rake_package_and_test: &rake_package_and_test
  package_script: cd $PLATFORM && rake
  package_full_script: cd $PLATFORM && rake package_full
  test_script: cd $PLATFORM && rake test

rake_package_and_test_docker: &rake_package_and_test_docker
  package_script: cd $PLATFORM && rake
  package_full_script: cd $PLATFORM && rake package_full
  test_docker_script: cd $PLATFORM && rake test_docker

ENV_CHECK_SCRIPT: &ENV_CHECK_SCRIPT
  check_script: |
    uname -a
    echo "CIRRUS_ARCH: $CIRRUS_ARCH"
    echo "PLATFORM: $PLATFORM"
    echo "script: $script"
    echo "NEXT_TAG: $NEXT_TAG"
    echo "ARCHITECTURES: $ARCHITECTURES"
    echo "repo: $REPO"
    echo "script: $script"

BINARY_ATRIFACTS: &BINARY_ATRIFACTS
  binary_artifacts:
    path: "$PLATFORM/**/*.tar.gz"

# ========================================
# Linux - Packager
# ========================================

## The <os>_<arch>_packager_docker_builder jobs are used to build
## each version of ruby on a single runner. The rake task has been
## modified to build all versions of ruby in a single run and not fail

linux_arm64_packager_docker_builder:
  cpu: 4
  memory: 4G
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(packager-linux-arm64\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(packager-linux\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(packager\).*'
  env:
    CIRRUS_ARCH: arm64
    PLATFORM: linux
    ARCHITECTURES: arm64
  <<: *ENV_CHECK_SCRIPT
  broken_version_remover_script: |
    sed -ie 's/3.0.6/3.0.4/' RUBY_VERSIONS.txt
    sed -ie '/2.7.8/d' RUBY_VERSIONS.txt
  <<: *rake_package_and_test
  <<: *INSTALL_GH_CLI
  <<: *UPLOAD_TASK
  <<: *BINARY_ATRIFACTS

linux_x64_packager_docker_builder:
  cpu: 4
  memory: 4G
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(packager-linux-x86_64\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(packager-linux\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(packager\).*'
  env:
    CIRRUS_ARCH: amd64
    PLATFORM: linux
    ARCHITECTURES: x86_64
  <<: *ENV_CHECK_SCRIPT
  broken_version_remover_script: |
    sed -ie 's/3.0.6/3.0.4/' RUBY_VERSIONS.txt
    sed -ie '/2.7.8/d' RUBY_VERSIONS.txt
  <<: *rake_package_and_test
  <<: *INSTALL_GH_CLI
  <<: *UPLOAD_TASK
  <<: *BINARY_ATRIFACTS


# ========================================
# Linux - Matrix Package & Test
# ========================================

## The <os>_<arch>_matrix_builder jobs are used to build each 
## version of ruby on seperate runners and run a test suite
## of docker containers to ensure the binaries are working

linux_arm64_matrix_docker_builder:
  cpu: 4
  memory: 4G
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix-linux-arm64\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix\).*' || $CIRRUS_BRANCH =~ 'main'
  env:
    CIRRUS_ARCH: arm64
    PLATFORM: linux
    ARCHITECTURES: arm64
    matrix:
      *RUBY_VERSIONS_MATRIX_LINUX
  <<: *ENV_CHECK_SCRIPT
  <<: *rake_package_and_test_docker
  <<: *INSTALL_GH_CLI
  <<: *UPLOAD_TASK
  <<: *BINARY_ATRIFACTS

linux_x64_matrix_docker_builder:
  cpu: 4
  memory: 4G
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix-linux-x86_64\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix\).*' || $CIRRUS_BRANCH =~ 'main'
  env:
    CIRRUS_ARCH: amd64
    PLATFORM: linux
    ARCHITECTURES: x86_64
    matrix:
      *RUBY_VERSIONS_MATRIX_LINUX
  <<: *ENV_CHECK_SCRIPT
  <<: *rake_package_and_test_docker
  <<: *INSTALL_GH_CLI
  <<: *UPLOAD_TASK
  <<: *BINARY_ATRIFACTS

linux_arm64_alpine_matrix_docker_builder:
  cpu: 4
  memory: 4G
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix-linux-musl-arm64\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(alpine\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix\).*' || $CIRRUS_BRANCH =~ 'main'
  env:
    CIRRUS_ARCH: arm64
    PLATFORM: alpine
    ARCHITECTURES: arm64
    matrix:
      *RUBY_VERSIONS_MATRIX_LINUX_ALPINE
  <<: *ENV_CHECK_SCRIPT
  <<: *rake_package_and_test_docker
  <<: *INSTALL_GH_CLI
  <<: *UPLOAD_TASK
  <<: *BINARY_ATRIFACTS

linux_x64_alpine_matrix_docker_builder:
  cpu: 4
  memory: 4G
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix-linux-musl-x86_64\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(alpine\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix\).*' || $CIRRUS_BRANCH =~ 'main'
  env:
    CIRRUS_ARCH: amd64
    PLATFORM: alpine
    ARCHITECTURES: x86_64
    matrix:
      *RUBY_VERSIONS_MATRIX_LINUX_ALPINE
  <<: *ENV_CHECK_SCRIPT
  <<: *rake_package_and_test_docker
  <<: *INSTALL_GH_CLI
  <<: *UPLOAD_TASK
  <<: *BINARY_ATRIFACTS

# ========================================
# MacOS
# ========================================

cirrus_cli_setup: &cirrus_cli_setup
  cirrus_cli_script: |
    ls $PLATFORM
    
    echo "removing runtime and output folder"
    find "$PLATFORM" -type d -name "output" -exec rm -rf {} +
    find "$PLATFORM" -type d -name "runtime" -exec rm -rf {} +
    echo "removing traveling-ruby packaged gems"
    find "$PLATFORM" -type d -name "traveling-ruby-gems" -exec rm -rf {} +
    echo "removing traveling-ruby packaged runtimes"
    find "$PLATFORM" -type f -name "traveling-ruby-*.tar.gz" -exec rm -f {} +
    echo "removing existing runtime if it exists"
    find "$PLATFORM" -type f -name "$PLATFORM-runtime.tar.gz" -exec rm -f {} +
    
    ls $PLATFORM

    echo "chmoddiing script files due to lack of file perms in cirrus-cli"
    find $PLATFORM shared -name '*.sh'
    find $PLATFORM shared -name '*.sh' -exec chmod +x {} \;
    chmod +x osx/internal/bin/c++
    chmod +x osx/internal/bin/cc
    ls $PLATFORM

download_macos_runtime: &download_macos_runtime
  download_script: |
    echo "downloading pre-packaged runtime"
    curl -L -o $PLATFORM/runtime.tar.gz https://github.com/YOU54F/traveling-ruby/releases/download/rel-20240116/osx-runtime-$ARCHITECTURES.tar.gz
    echo "unpacking pre-packaged runtime"
    mkdir -p $PLATFORM/runtime
    [[ -f "$PLATFORM/runtime.tar.gz" ]] && cd $PLATFORM && tar -xzf ../$PLATFORM/runtime.tar.gz && rm -rf ../$PLATFORM/runtime.tar.gz && echo "unpacked osx-runtime-$ARCHITECTURES.tar.gz" && ls -al ../$PLATFORM/runtime
    cd ..
    ls $PLATFORM

macos_check: &macos_check
  check_script: |
    ruby --version
    bundler --version
    brew leaves
    xcode-select -p
    which cc
    which c++
    cc --version -arch $CIRRUS_ARCH
    c++ --version -arch $CIRRUS_ARCH
    cc --version -arch x86_64
    c++ --version -arch x86_64

set_bundler_version: &set_bundler_version
  set_bundler_version_script: |
    $USE_ROSETTA rbenv global system
    $USE_ROSETTA sudo gem install bundler -v $(cat BUNDLER_VERSION.txt)
    $USE_ROSETTA bundler --version
    $USE_ROSETTA rbenv global 3.2.3

macos_check_task: 
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(mac-check\).*'
  env:
    PLATFORM: osx
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  <<: *macos_check
  <<: *cirrus_cli_setup

mac_ruby_setup: &mac_ruby_setup
  mac_ruby_script: |
    RUBY_MAJOR_MINOR=$(echo $RUBY_VERSIONS | cut -d' ' -f2 | cut -d'.' -f1-2)
    if [ "$RUBY_MAJOR_MINOR" = "3.3" ]; then
      # brew install ruby --HEAD
      echo "ruby HEAD installed"
    else
      brew install ruby@$RUBY_MAJOR_MINOR
    fi

macos_stash_conflicting_paths: &macos_stash_conflicting_paths
  stash_conflicting_paths_script: cd $PLATFORM && sudo rake stash_conflicting_paths

# ========================================
# MacOS - Packager
# ========================================

macos_packager_task: 
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(packager-macos\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(packager\).*'
  env:
    PLATFORM: osx
    USE_HOMEBREW_RUBY: 1
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  # <<: *mac_ruby_setup
  <<: *macos_check
  <<: *cirrus_cli_setup
  # <<: *set_bundler_version
  <<: *macos_stash_conflicting_paths
  <<: *download_macos_runtime
  package_script: cd $PLATFORM && rake
  package_script: cd $PLATFORM && rake 
  <<: *BINARY_ATRIFACTS

# ========================================
# MacOS - Matrix Package & Test
# ========================================

## The <os>_<arch>_matrix_builder jobs are used to build each 
## version of ruby on seperate runners and run a test suite
## of docker containers to ensure the binaries are working


macos_arm64_matrix_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix-macos\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix-macos-arm64\).*' || $CIRRUS_BRANCH =~ 'main'
  macos_instance:
    # image: traveling-ruby-builder
    # image: ghcr.io/cirruslabs/macos-ventura-vanilla:latest
    image: ghcr.io/cirruslabs/macos-sonoma-base:latest
  env:
    PLATFORM: osx
    ARCHITECTURES: arm64
    matrix:
      *RUBY_VERSIONS_MATRIX_MACOS
  <<: *macos_check
  <<: *cirrus_cli_setup
  <<: *macos_stash_conflicting_paths
  <<: *download_macos_runtime
  <<: *rake_package_and_test
  # upload_output_dir_script: cd $PLATFORM && tar -czvf $PLATFORM-runtime.tar.gz runtime
  <<: *UPLOAD_TASK
  <<: *BINARY_ATRIFACTS

macos_x86_64_matrix_task:
  timeout_in: 120m
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix-macos\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix-macos-x86_64\).*' || $CIRRUS_BRANCH =~ 'main'
  macos_instance:
    # image: traveling-ruby-builder
    image: ghcr.io/cirruslabs/macos-sonoma-base:latest
  env:
    PLATFORM: osx
    ARCHITECTURES: x86_64
    # $USE_ROSETTA: arch -m x86_64
    matrix:
      *RUBY_VERSIONS_MATRIX_MACOS
  <<: *macos_check
  <<: *cirrus_cli_setup
  <<: *macos_stash_conflicting_paths
  <<: *download_macos_runtime
  install_rosetta_script: softwareupdate --install-rosetta --agree-to-license
  <<: *rake_package_and_test
  # upload_output_dir_script: cd $PLATFORM && tar -czvf $PLATFORM-runtime.tar.gz runtime
  <<: *UPLOAD_TASK
  <<: *BINARY_ATRIFACTS

# ========================================
# Windows - Packager
# ========================================

windows_packager_task: 
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(packager-windows\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(packager\).*' || $CIRRUS_CHANGE_TITLE =~ 'ci\(matrix\).*' || $CIRRUS_BRANCH =~ 'main'
  env:
    PLATFORM: windows
    matrix:
      - script: rake --trace
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  windows_setup_script: |
    brew install sevenzip
  <<: *cirrus_cli_setup
  package_script: cd $PLATFORM && rake
  <<: *UPLOAD_TASK
  <<: *BINARY_ATRIFACTS


# ========================================
# Windows - Matrix Package & Test
# ========================================







# ========================================
# Standalone Testing Tasks against GH releases
# ========================================


linux_gem_test_task: 
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(test-linux-gems\).*'
  env: 
    GH_TOKEN: $GITHUB_TOKEN
    matrix:
      image: debian:latest
      image: node:20-slim
      # image: debian:bookworm-slim
      # image: bitnami/minideb:latest
      # image: busybox:glibc
      # image: busybox:uclibc
      # image: busybox:musl
      # image: centos:centos8
      # image: centos:centos9
      # image: quay.io/centos/centos:stream
      # image: quay.io/centos/centos:stream9
      # image: quay.io/centos/centos:stream9-minimal
      # image: quay.io/centos/centos:stream8
      # image: quay.io/centos/centos:8
      # image: centos:centos7
      # image: alpine:latest
      # image: alpine:3.18
      # image: alpine:3.17
      # image: alpine:3.16
      # image: alpine:3.15
      # image: ubuntu:latest
      # image: ubuntu:20.04
      # image: ubuntu:18.04
      # image: ubuntu:16.04
      # image: fedora:latest
      # image: fedora:34
      # image: fedora:33
      # image: fedora:32
      # image: opensuse/leap:latest
      # image: opensuse/leap:15.3
      # image: opensuse/leap:15.2
      # image: opensuse/leap:15.1
      # image: opensuse/leap:15.0
      # image: gentoo/stage3-amd64
      # image: raspbian/stretch
      # image: raspbian/buster
      # image: raspbian/bullseye

  arm_container:
    image: $image
  check_dep_script: |
    ldconfig -v | grep libffi || echo "libffi not found"
    ldconfig -v | grep libyaml || echo "libyaml not found"
  dependencies_script: |
      if [ -f /etc/debian_version ]; then
        apt-get update
        apt-get install -y curl
      elif [ -f /etc/alpine-release ]; then
        apk add --no-cache curl
      elif [ -f /etc/redhat-release ]; then
        yum install -y curl
      elif [ -f /etc/busybox-release ]; then
        apk add --no-cache curl
      else
        echo "Unsupported Linux distribution"
        exit 1
      fi
  <<: *INSTALL_GH_CLI
  check_gh_cli_script: |
    gh --version
    echo "gh cli installed"
    echo "repo: ${REPO}"
    echo "tag: ${NEXT_TAG}"
  unpack_script: |
    gh release view --repo "${REPO}" "${NEXT_TAG}" --json assets -q '.[]|.[].name' | grep -e 'linux-arm'
    ls -la
    cd linux
    gh release download --repo "${REPO}" "${NEXT_TAG}" -p "traveling-ruby-${PKG_DATE}*linux-arm*"
    ls -la
    ../shared/list-versions.sh linux
    ../shared/unpack-versions.sh linux
    ../shared/test-all-gems.sh linux

# ========================================
# Test Standalone Cli.sh script
# ========================================


install_homebrew_script: &install_homebrew_script |
  # curl required for downloader, build-essential/git required for linuxbrew
  apt update && apt install --yes curl build-essential git 
  curl -fsSL https://raw.githubusercontent.com/you54f/traveling-ruby/main/cli.sh | sh -s -- --ci -v 2.6.10
  echo 'export PATH=/root/.travelling-ruby/bin:${PATH}' >> /root/.profile
  source /root/.profile
  ruby --version
  which ruby
  HOMEBREW_BREW_GIT_REMOTE="https://github.com/you54f/brew" NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/you54f/install/HEAD/install.sh)" 
  git -C "/home/linuxbrew/.linuxbrew/Homebrew" remote set-url origin https://github.com/Homebrew/brew
  echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /root/.profile
  source /root/.profile
  brew --version
  brew config
  brew doctor || echo "brew doctor failed with warning about unsupported architecture"
  brew upgrade
  export PATH=/root/.travelling-ruby/bin:${PATH}:/home/linuxbrew/.linuxbrew/bin
  echo "PATH=${PATH}" >>$CIRRUS_ENV

test_homebrew_script: &test_homebrew_script |
  brew install you54f/pact/pact-plugin-cli
  brew info you54f/pact/pact-plugin-cli
  pact-plugin-cli --help

run_commands: &run_commands
  install_homebrew_script: *install_homebrew_script
  test_homebrew_script: *test_homebrew_script

# cli_arm_task:
#   arm_container:
#     image: ubuntu:22.04
#   <<: *run_commands

# cli_amd_task:
#   container:
#     image: ubuntu:22.04
#   <<: *run_commands
