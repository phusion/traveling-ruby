VERSION       = File.read("../VERSION.txt").strip
RUBY_VERSIONS = ENV['RUBY_VERSIONS'] ? [].push(ENV['RUBY_VERSIONS']) : File.read("../RUBY_VERSIONS.txt").strip.split(/\s+/)
ARCHITECTURES = ENV['ARCHITECTURES'] ? [].push(ENV['ARCHITECTURES']) : ["x86_64","x86"]

task :default => :package


desc "Create packages for all Ruby versions (#{RUBY_VERSIONS.join(' ')} and ARCHITECTURES (#{ARCHITECTURES.join(' ')})"
task :package do
  # Do nothing
end

desc "Build binaries for all Ruby versions (#{RUBY_VERSIONS.join(' ')})"
task :build do
  # Do nothing
end

desc "Upload all packages to the server"
task :upload do
  # Do nothing
end

desc "Clean all packages and binaries"
task :clean do
  sh "rm -rf output"
end

ARCHITECTURES.each do |arch|
  begin
  task :package => "package:#{arch}"


  RUBY_VERSIONS.each do |ruby_version|
    begin
    package = "traveling-ruby-#{VERSION}-#{ruby_version}-windows-#{arch}.tar.gz"

    task :package => "package:#{arch}:#{ruby_version}"
    task :build   => "build:#{ruby_version}"
    task :upload  => "upload:#{ruby_version}"
    task :clean   => "clean:#{ruby_version}"

    desc "Create packages for Platform #{arch}"
    task "package:#{arch}" => ["package:#{arch}:#{ruby_version}"]

    desc "Create packages for Platform #{arch} Ruby Version #{ruby_version}"
    task "package:#{arch}:#{ruby_version}" => [package]

    desc "Build binaries for Ruby #{ruby_version}"
    task "build:#{ruby_version}" => "output/#{ruby_version}/#{arch}/bin"

    file(package => "output/#{ruby_version}/#{arch}/bin") do
      sh "./package.sh -r #{package} \"output/#{ruby_version}/#{arch}\""
    end

    # We use 'file' instead of 'directory' here so that packages are updated
    # whenever we update binaries.
    file("output/#{ruby_version}/#{arch}/bin") do
      sh "mkdir -p cache \"output/#{ruby_version}/#{arch}\""
      sh "./build-ruby.sh -a #{arch} -r #{ruby_version} cache \"output/#{ruby_version}/#{arch}\""
    end

    desc "Upload Ruby #{ruby_version} packages to the server"
    task "upload:#{ruby_version}" => [package] do
      sh "aws s3 cp #{package} s3://traveling-ruby/releases/ --acl public-read"
    end
    
    desc "Clean Ruby #{ruby_version} packages and binaries and runtime"
    task "clean:#{ruby_version}" do
      sh "rm -rf \"#{package} \"output/#{ruby_version}/#{arch}\" cache\""
    end
    rescue Exception => e
      puts "Failed to build for Ruby #{ruby_version} on Architecture #{arch}"
      puts "Error: #{e.message}"
    end
  end
  rescue Exception => e
    puts "Failed to build for Ruby #{ruby_version} on Architecture #{arch}"
    puts "Error: #{e.message}"
  end
end
